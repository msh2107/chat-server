package mocks

// Code generated by http://github.com/gojuno/minimock (dev). DO NOT EDIT.

//go:generate minimock -i github.com/msh2107/chat-server/internal/repository.MessageRepository -o ./mocks/message_repository_minimock.go -n MessageRepositoryMock

import (
	"context"
	"sync"
	mm_atomic "sync/atomic"
	mm_time "time"

	"github.com/gojuno/minimock/v3"
	"github.com/msh2107/chat-server/internal/model"
)

// MessageRepositoryMock implements repository.MessageRepository
type MessageRepositoryMock struct {
	t minimock.Tester

	funcGetMessages          func(ctx context.Context, chatID int64, limit int64) (ma1 []model.Message, err error)
	inspectFuncGetMessages   func(ctx context.Context, chatID int64, limit int64)
	afterGetMessagesCounter  uint64
	beforeGetMessagesCounter uint64
	GetMessagesMock          mMessageRepositoryMockGetMessages

	funcSendMessage          func(ctx context.Context, message *model.MessageInfo) (err error)
	inspectFuncSendMessage   func(ctx context.Context, message *model.MessageInfo)
	afterSendMessageCounter  uint64
	beforeSendMessageCounter uint64
	SendMessageMock          mMessageRepositoryMockSendMessage
}

// NewMessageRepositoryMock returns a mock for repository.MessageRepository
func NewMessageRepositoryMock(t minimock.Tester) *MessageRepositoryMock {
	m := &MessageRepositoryMock{t: t}
	if controller, ok := t.(minimock.MockController); ok {
		controller.RegisterMocker(m)
	}

	m.GetMessagesMock = mMessageRepositoryMockGetMessages{mock: m}
	m.GetMessagesMock.callArgs = []*MessageRepositoryMockGetMessagesParams{}

	m.SendMessageMock = mMessageRepositoryMockSendMessage{mock: m}
	m.SendMessageMock.callArgs = []*MessageRepositoryMockSendMessageParams{}

	return m
}

type mMessageRepositoryMockGetMessages struct {
	mock               *MessageRepositoryMock
	defaultExpectation *MessageRepositoryMockGetMessagesExpectation
	expectations       []*MessageRepositoryMockGetMessagesExpectation

	callArgs []*MessageRepositoryMockGetMessagesParams
	mutex    sync.RWMutex
}

// MessageRepositoryMockGetMessagesExpectation specifies expectation struct of the MessageRepository.GetMessages
type MessageRepositoryMockGetMessagesExpectation struct {
	mock    *MessageRepositoryMock
	params  *MessageRepositoryMockGetMessagesParams
	results *MessageRepositoryMockGetMessagesResults
	Counter uint64
}

// MessageRepositoryMockGetMessagesParams contains parameters of the MessageRepository.GetMessages
type MessageRepositoryMockGetMessagesParams struct {
	ctx    context.Context
	chatID int64
	limit  int64
}

// MessageRepositoryMockGetMessagesResults contains results of the MessageRepository.GetMessages
type MessageRepositoryMockGetMessagesResults struct {
	ma1 []model.Message
	err error
}

// Expect sets up expected params for MessageRepository.GetMessages
func (mmGetMessages *mMessageRepositoryMockGetMessages) Expect(ctx context.Context, chatID int64, limit int64) *mMessageRepositoryMockGetMessages {
	if mmGetMessages.mock.funcGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("MessageRepositoryMock.GetMessages mock is already set by Set")
	}

	if mmGetMessages.defaultExpectation == nil {
		mmGetMessages.defaultExpectation = &MessageRepositoryMockGetMessagesExpectation{}
	}

	mmGetMessages.defaultExpectation.params = &MessageRepositoryMockGetMessagesParams{ctx, chatID, limit}
	for _, e := range mmGetMessages.expectations {
		if minimock.Equal(e.params, mmGetMessages.defaultExpectation.params) {
			mmGetMessages.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmGetMessages.defaultExpectation.params)
		}
	}

	return mmGetMessages
}

// Inspect accepts an inspector function that has same arguments as the MessageRepository.GetMessages
func (mmGetMessages *mMessageRepositoryMockGetMessages) Inspect(f func(ctx context.Context, chatID int64, limit int64)) *mMessageRepositoryMockGetMessages {
	if mmGetMessages.mock.inspectFuncGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("Inspect function is already set for MessageRepositoryMock.GetMessages")
	}

	mmGetMessages.mock.inspectFuncGetMessages = f

	return mmGetMessages
}

// Return sets up results that will be returned by MessageRepository.GetMessages
func (mmGetMessages *mMessageRepositoryMockGetMessages) Return(ma1 []model.Message, err error) *MessageRepositoryMock {
	if mmGetMessages.mock.funcGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("MessageRepositoryMock.GetMessages mock is already set by Set")
	}

	if mmGetMessages.defaultExpectation == nil {
		mmGetMessages.defaultExpectation = &MessageRepositoryMockGetMessagesExpectation{mock: mmGetMessages.mock}
	}
	mmGetMessages.defaultExpectation.results = &MessageRepositoryMockGetMessagesResults{ma1, err}
	return mmGetMessages.mock
}

// Set uses given function f to mock the MessageRepository.GetMessages method
func (mmGetMessages *mMessageRepositoryMockGetMessages) Set(f func(ctx context.Context, chatID int64, limit int64) (ma1 []model.Message, err error)) *MessageRepositoryMock {
	if mmGetMessages.defaultExpectation != nil {
		mmGetMessages.mock.t.Fatalf("Default expectation is already set for the MessageRepository.GetMessages method")
	}

	if len(mmGetMessages.expectations) > 0 {
		mmGetMessages.mock.t.Fatalf("Some expectations are already set for the MessageRepository.GetMessages method")
	}

	mmGetMessages.mock.funcGetMessages = f
	return mmGetMessages.mock
}

// When sets expectation for the MessageRepository.GetMessages which will trigger the result defined by the following
// Then helper
func (mmGetMessages *mMessageRepositoryMockGetMessages) When(ctx context.Context, chatID int64, limit int64) *MessageRepositoryMockGetMessagesExpectation {
	if mmGetMessages.mock.funcGetMessages != nil {
		mmGetMessages.mock.t.Fatalf("MessageRepositoryMock.GetMessages mock is already set by Set")
	}

	expectation := &MessageRepositoryMockGetMessagesExpectation{
		mock:   mmGetMessages.mock,
		params: &MessageRepositoryMockGetMessagesParams{ctx, chatID, limit},
	}
	mmGetMessages.expectations = append(mmGetMessages.expectations, expectation)
	return expectation
}

// Then sets up MessageRepository.GetMessages return parameters for the expectation previously defined by the When method
func (e *MessageRepositoryMockGetMessagesExpectation) Then(ma1 []model.Message, err error) *MessageRepositoryMock {
	e.results = &MessageRepositoryMockGetMessagesResults{ma1, err}
	return e.mock
}

// GetMessages implements repository.MessageRepository
func (mmGetMessages *MessageRepositoryMock) GetMessages(ctx context.Context, chatID int64, limit int64) (ma1 []model.Message, err error) {
	mm_atomic.AddUint64(&mmGetMessages.beforeGetMessagesCounter, 1)
	defer mm_atomic.AddUint64(&mmGetMessages.afterGetMessagesCounter, 1)

	if mmGetMessages.inspectFuncGetMessages != nil {
		mmGetMessages.inspectFuncGetMessages(ctx, chatID, limit)
	}

	mm_params := &MessageRepositoryMockGetMessagesParams{ctx, chatID, limit}

	// Record call args
	mmGetMessages.GetMessagesMock.mutex.Lock()
	mmGetMessages.GetMessagesMock.callArgs = append(mmGetMessages.GetMessagesMock.callArgs, mm_params)
	mmGetMessages.GetMessagesMock.mutex.Unlock()

	for _, e := range mmGetMessages.GetMessagesMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.ma1, e.results.err
		}
	}

	if mmGetMessages.GetMessagesMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmGetMessages.GetMessagesMock.defaultExpectation.Counter, 1)
		mm_want := mmGetMessages.GetMessagesMock.defaultExpectation.params
		mm_got := MessageRepositoryMockGetMessagesParams{ctx, chatID, limit}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmGetMessages.t.Errorf("MessageRepositoryMock.GetMessages got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmGetMessages.GetMessagesMock.defaultExpectation.results
		if mm_results == nil {
			mmGetMessages.t.Fatal("No results are set for the MessageRepositoryMock.GetMessages")
		}
		return (*mm_results).ma1, (*mm_results).err
	}
	if mmGetMessages.funcGetMessages != nil {
		return mmGetMessages.funcGetMessages(ctx, chatID, limit)
	}
	mmGetMessages.t.Fatalf("Unexpected call to MessageRepositoryMock.GetMessages. %v %v %v", ctx, chatID, limit)
	return
}

// GetMessagesAfterCounter returns a count of finished MessageRepositoryMock.GetMessages invocations
func (mmGetMessages *MessageRepositoryMock) GetMessagesAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessages.afterGetMessagesCounter)
}

// GetMessagesBeforeCounter returns a count of MessageRepositoryMock.GetMessages invocations
func (mmGetMessages *MessageRepositoryMock) GetMessagesBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmGetMessages.beforeGetMessagesCounter)
}

// Calls returns a list of arguments used in each call to MessageRepositoryMock.GetMessages.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmGetMessages *mMessageRepositoryMockGetMessages) Calls() []*MessageRepositoryMockGetMessagesParams {
	mmGetMessages.mutex.RLock()

	argCopy := make([]*MessageRepositoryMockGetMessagesParams, len(mmGetMessages.callArgs))
	copy(argCopy, mmGetMessages.callArgs)

	mmGetMessages.mutex.RUnlock()

	return argCopy
}

// MinimockGetMessagesDone returns true if the count of the GetMessages invocations corresponds
// the number of defined expectations
func (m *MessageRepositoryMock) MinimockGetMessagesDone() bool {
	for _, e := range m.GetMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMessagesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMessages != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		return false
	}
	return true
}

// MinimockGetMessagesInspect logs each unmet expectation
func (m *MessageRepositoryMock) MinimockGetMessagesInspect() {
	for _, e := range m.GetMessagesMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessageRepositoryMock.GetMessages with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.GetMessagesMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		if m.GetMessagesMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessageRepositoryMock.GetMessages")
		} else {
			m.t.Errorf("Expected call to MessageRepositoryMock.GetMessages with params: %#v", *m.GetMessagesMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcGetMessages != nil && mm_atomic.LoadUint64(&m.afterGetMessagesCounter) < 1 {
		m.t.Error("Expected call to MessageRepositoryMock.GetMessages")
	}
}

type mMessageRepositoryMockSendMessage struct {
	mock               *MessageRepositoryMock
	defaultExpectation *MessageRepositoryMockSendMessageExpectation
	expectations       []*MessageRepositoryMockSendMessageExpectation

	callArgs []*MessageRepositoryMockSendMessageParams
	mutex    sync.RWMutex
}

// MessageRepositoryMockSendMessageExpectation specifies expectation struct of the MessageRepository.SendMessage
type MessageRepositoryMockSendMessageExpectation struct {
	mock    *MessageRepositoryMock
	params  *MessageRepositoryMockSendMessageParams
	results *MessageRepositoryMockSendMessageResults
	Counter uint64
}

// MessageRepositoryMockSendMessageParams contains parameters of the MessageRepository.SendMessage
type MessageRepositoryMockSendMessageParams struct {
	ctx     context.Context
	message *model.MessageInfo
}

// MessageRepositoryMockSendMessageResults contains results of the MessageRepository.SendMessage
type MessageRepositoryMockSendMessageResults struct {
	err error
}

// Expect sets up expected params for MessageRepository.SendMessage
func (mmSendMessage *mMessageRepositoryMockSendMessage) Expect(ctx context.Context, message *model.MessageInfo) *mMessageRepositoryMockSendMessage {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("MessageRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &MessageRepositoryMockSendMessageExpectation{}
	}

	mmSendMessage.defaultExpectation.params = &MessageRepositoryMockSendMessageParams{ctx, message}
	for _, e := range mmSendMessage.expectations {
		if minimock.Equal(e.params, mmSendMessage.defaultExpectation.params) {
			mmSendMessage.mock.t.Fatalf("Expectation set by When has same params: %#v", *mmSendMessage.defaultExpectation.params)
		}
	}

	return mmSendMessage
}

// Inspect accepts an inspector function that has same arguments as the MessageRepository.SendMessage
func (mmSendMessage *mMessageRepositoryMockSendMessage) Inspect(f func(ctx context.Context, message *model.MessageInfo)) *mMessageRepositoryMockSendMessage {
	if mmSendMessage.mock.inspectFuncSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("Inspect function is already set for MessageRepositoryMock.SendMessage")
	}

	mmSendMessage.mock.inspectFuncSendMessage = f

	return mmSendMessage
}

// Return sets up results that will be returned by MessageRepository.SendMessage
func (mmSendMessage *mMessageRepositoryMockSendMessage) Return(err error) *MessageRepositoryMock {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("MessageRepositoryMock.SendMessage mock is already set by Set")
	}

	if mmSendMessage.defaultExpectation == nil {
		mmSendMessage.defaultExpectation = &MessageRepositoryMockSendMessageExpectation{mock: mmSendMessage.mock}
	}
	mmSendMessage.defaultExpectation.results = &MessageRepositoryMockSendMessageResults{err}
	return mmSendMessage.mock
}

// Set uses given function f to mock the MessageRepository.SendMessage method
func (mmSendMessage *mMessageRepositoryMockSendMessage) Set(f func(ctx context.Context, message *model.MessageInfo) (err error)) *MessageRepositoryMock {
	if mmSendMessage.defaultExpectation != nil {
		mmSendMessage.mock.t.Fatalf("Default expectation is already set for the MessageRepository.SendMessage method")
	}

	if len(mmSendMessage.expectations) > 0 {
		mmSendMessage.mock.t.Fatalf("Some expectations are already set for the MessageRepository.SendMessage method")
	}

	mmSendMessage.mock.funcSendMessage = f
	return mmSendMessage.mock
}

// When sets expectation for the MessageRepository.SendMessage which will trigger the result defined by the following
// Then helper
func (mmSendMessage *mMessageRepositoryMockSendMessage) When(ctx context.Context, message *model.MessageInfo) *MessageRepositoryMockSendMessageExpectation {
	if mmSendMessage.mock.funcSendMessage != nil {
		mmSendMessage.mock.t.Fatalf("MessageRepositoryMock.SendMessage mock is already set by Set")
	}

	expectation := &MessageRepositoryMockSendMessageExpectation{
		mock:   mmSendMessage.mock,
		params: &MessageRepositoryMockSendMessageParams{ctx, message},
	}
	mmSendMessage.expectations = append(mmSendMessage.expectations, expectation)
	return expectation
}

// Then sets up MessageRepository.SendMessage return parameters for the expectation previously defined by the When method
func (e *MessageRepositoryMockSendMessageExpectation) Then(err error) *MessageRepositoryMock {
	e.results = &MessageRepositoryMockSendMessageResults{err}
	return e.mock
}

// SendMessage implements repository.MessageRepository
func (mmSendMessage *MessageRepositoryMock) SendMessage(ctx context.Context, message *model.MessageInfo) (err error) {
	mm_atomic.AddUint64(&mmSendMessage.beforeSendMessageCounter, 1)
	defer mm_atomic.AddUint64(&mmSendMessage.afterSendMessageCounter, 1)

	if mmSendMessage.inspectFuncSendMessage != nil {
		mmSendMessage.inspectFuncSendMessage(ctx, message)
	}

	mm_params := &MessageRepositoryMockSendMessageParams{ctx, message}

	// Record call args
	mmSendMessage.SendMessageMock.mutex.Lock()
	mmSendMessage.SendMessageMock.callArgs = append(mmSendMessage.SendMessageMock.callArgs, mm_params)
	mmSendMessage.SendMessageMock.mutex.Unlock()

	for _, e := range mmSendMessage.SendMessageMock.expectations {
		if minimock.Equal(e.params, mm_params) {
			mm_atomic.AddUint64(&e.Counter, 1)
			return e.results.err
		}
	}

	if mmSendMessage.SendMessageMock.defaultExpectation != nil {
		mm_atomic.AddUint64(&mmSendMessage.SendMessageMock.defaultExpectation.Counter, 1)
		mm_want := mmSendMessage.SendMessageMock.defaultExpectation.params
		mm_got := MessageRepositoryMockSendMessageParams{ctx, message}
		if mm_want != nil && !minimock.Equal(*mm_want, mm_got) {
			mmSendMessage.t.Errorf("MessageRepositoryMock.SendMessage got unexpected parameters, want: %#v, got: %#v%s\n", *mm_want, mm_got, minimock.Diff(*mm_want, mm_got))
		}

		mm_results := mmSendMessage.SendMessageMock.defaultExpectation.results
		if mm_results == nil {
			mmSendMessage.t.Fatal("No results are set for the MessageRepositoryMock.SendMessage")
		}
		return (*mm_results).err
	}
	if mmSendMessage.funcSendMessage != nil {
		return mmSendMessage.funcSendMessage(ctx, message)
	}
	mmSendMessage.t.Fatalf("Unexpected call to MessageRepositoryMock.SendMessage. %v %v", ctx, message)
	return
}

// SendMessageAfterCounter returns a count of finished MessageRepositoryMock.SendMessage invocations
func (mmSendMessage *MessageRepositoryMock) SendMessageAfterCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.afterSendMessageCounter)
}

// SendMessageBeforeCounter returns a count of MessageRepositoryMock.SendMessage invocations
func (mmSendMessage *MessageRepositoryMock) SendMessageBeforeCounter() uint64 {
	return mm_atomic.LoadUint64(&mmSendMessage.beforeSendMessageCounter)
}

// Calls returns a list of arguments used in each call to MessageRepositoryMock.SendMessage.
// The list is in the same order as the calls were made (i.e. recent calls have a higher index)
func (mmSendMessage *mMessageRepositoryMockSendMessage) Calls() []*MessageRepositoryMockSendMessageParams {
	mmSendMessage.mutex.RLock()

	argCopy := make([]*MessageRepositoryMockSendMessageParams, len(mmSendMessage.callArgs))
	copy(argCopy, mmSendMessage.callArgs)

	mmSendMessage.mutex.RUnlock()

	return argCopy
}

// MinimockSendMessageDone returns true if the count of the SendMessage invocations corresponds
// the number of defined expectations
func (m *MessageRepositoryMock) MinimockSendMessageDone() bool {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			return false
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		return false
	}
	return true
}

// MinimockSendMessageInspect logs each unmet expectation
func (m *MessageRepositoryMock) MinimockSendMessageInspect() {
	for _, e := range m.SendMessageMock.expectations {
		if mm_atomic.LoadUint64(&e.Counter) < 1 {
			m.t.Errorf("Expected call to MessageRepositoryMock.SendMessage with params: %#v", *e.params)
		}
	}

	// if default expectation was set then invocations count should be greater than zero
	if m.SendMessageMock.defaultExpectation != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		if m.SendMessageMock.defaultExpectation.params == nil {
			m.t.Error("Expected call to MessageRepositoryMock.SendMessage")
		} else {
			m.t.Errorf("Expected call to MessageRepositoryMock.SendMessage with params: %#v", *m.SendMessageMock.defaultExpectation.params)
		}
	}
	// if func was set then invocations count should be greater than zero
	if m.funcSendMessage != nil && mm_atomic.LoadUint64(&m.afterSendMessageCounter) < 1 {
		m.t.Error("Expected call to MessageRepositoryMock.SendMessage")
	}
}

// MinimockFinish checks that all mocked methods have been called the expected number of times
func (m *MessageRepositoryMock) MinimockFinish() {
	if !m.minimockDone() {
		m.MinimockGetMessagesInspect()

		m.MinimockSendMessageInspect()
		m.t.FailNow()
	}
}

// MinimockWait waits for all mocked methods to be called the expected number of times
func (m *MessageRepositoryMock) MinimockWait(timeout mm_time.Duration) {
	timeoutCh := mm_time.After(timeout)
	for {
		if m.minimockDone() {
			return
		}
		select {
		case <-timeoutCh:
			m.MinimockFinish()
			return
		case <-mm_time.After(10 * mm_time.Millisecond):
		}
	}
}

func (m *MessageRepositoryMock) minimockDone() bool {
	done := true
	return done &&
		m.MinimockGetMessagesDone() &&
		m.MinimockSendMessageDone()
}
